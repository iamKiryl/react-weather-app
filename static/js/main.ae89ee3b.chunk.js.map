{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["api","App","useState","query","setQuery","weather","setWeather","className","main","temp","type","placeholder","onChange","e","target","value","onKeyPress","evt","key","fetch","then","res","json","result","console","log","catch","err","alert","message","name","sys","country","d","day","getDay","date","getDate","month","getMonth","year","getFullYear","dateBuilder","Date","Math","round","description","src","icon","alt","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"mNAEMA,EACC,mCADDA,EAEE,2CAiEOC,MA9Df,WAAgB,IAAD,EACeC,mBAAS,IADxB,mBACLC,EADK,KACEC,EADF,OAEmBF,mBAAS,IAF5B,mBAELG,EAFK,KAEIC,EAFJ,KA+Bb,OACE,qBAAKC,UAAmC,oBAAhBF,EAAQG,KAAyBH,EAAQG,KAAKC,KAAO,EAAOJ,EAAQG,KAAKC,KAAO,GAAM,WAAa,MAAS,WAAc,MAAlJ,SACE,iCACE,qBAAKF,UAAU,aAAf,SACE,uBAAOG,KAAK,OAAOH,UAAU,aAAaI,YAAY,YAAYC,SAAU,SAAAC,GAAC,OAAIT,EAASS,EAAEC,OAAOC,QAAQA,MAAOZ,EAAOa,WA9BlH,SAAAC,GACG,UAAZA,EAAIC,KACJC,MAAM,GAAD,OAAInB,EAAJ,qBAAyBG,EAAzB,+BAAqDH,IACzDoB,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAAAG,GACJjB,EAAWiB,GACXnB,EAAS,IACToB,QAAQC,IAAIF,MACXG,OAAM,SAACC,GAAD,OAASC,MAAMD,EAAIE,iBAyBF,oBAAhBxB,EAAQG,KAChB,gCACE,sBAAKD,UAAU,eAAf,UACE,sBAAKA,UAAU,WAAf,UAA2BF,EAAQyB,KAAnC,KAA2CzB,EAAQ0B,IAAIC,WACvD,qBAAKzB,UAAU,OAAf,SAzBQ,SAAC0B,GACnB,IAGIC,EAFO,CAAC,SAAU,SAAU,UAAW,YAAa,WAAY,SAAU,YAE/DD,EAAEE,UACbC,EAAOH,EAAEI,UACTC,EALS,CAAC,UAAW,WAAY,QAAS,QAAS,MAAO,OAAQ,OAAQ,SAAU,YAAa,UAAW,WAAY,YAKzGL,EAAEM,YACjBC,EAAOP,EAAEQ,cAEb,MAAM,GAAN,OAAUP,EAAV,YAAiBE,EAAjB,YAAyBE,EAAzB,YAAkCE,GAgBDE,CAAY,IAAIC,WAEzC,sBAAKpC,UAAU,cAAf,UACE,sBAAKA,UAAU,OAAf,UACGqC,KAAKC,MAAMxC,EAAQG,KAAKC,MAD3B,UAGA,qBAAKF,UAAU,UAAf,SACGF,EAAQA,QAAQ,GAAGyC,cAEtB,qBAAKvC,UAAU,OAAf,SACE,qBAAKwC,IAAG,2CAAsC1C,EAAQA,QAAQ,GAAG2C,KAAzD,WAAwEC,IAAI,yBAIrF,SCnDAC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBhC,MAAK,YAAkD,IAA/CiC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.ae89ee3b.chunk.js","sourcesContent":["import React, { useState } from 'react';\n\nconst api = {\n  key: 'd8548e18770837bc53ae0bd039de7174',\n  base: 'https://api.openweathermap.org/data/2.5/',\n}\n\nfunction App() {\n  const [ query, setQuery ] = useState('');\n  const [ weather, setWeather ] = useState({});\n\n\n  const search = evt => {\n    if (evt.key === \"Enter\") {   \n        fetch(`${api.base}weather?q=${query}&units=metric&APPID=${api.key}`)\n        .then(res => res.json())\n        .then(result => {\n          setWeather(result)\n          setQuery('');\n          console.log(result)          \n        }).catch((err) => alert(err.message))\n    }\n  }\n\n  const dateBuilder = (d) => {\n    let months = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"]\n    let days = [\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"];\n\n    let day = days[d.getDay()];\n    let date = d.getDate();\n    let month = months[d.getMonth()];\n    let year = d.getFullYear();\n\n    return `${day} ${date} ${month} ${year}`\n  }\n\n\n\n  return (\n    <div className={(typeof weather.main != 'undefined') ? ((weather.main.temp > 0) ? ((weather.main.temp > 16) ? 'app warm' : 'app') : 'app cold') : 'app'}>\n      <main>\n        <div className=\"search-box\">\n          <input type=\"text\" className=\"search-bar\" placeholder='Search...' onChange={e => setQuery(e.target.value)} value={query} onKeyPress={search}/>\n        </div>\n        {\n          (typeof weather.main != 'undefined') ? (\n          <div>  \n            <div className=\"location-box\">\n              <div className=\"location\">{weather.name}, {weather.sys.country}</div>\n              <div className=\"date\">{dateBuilder(new Date())}</div>\n            </div>\n            <div className=\"weather-box\">\n              <div className=\"temp\">\n                {Math.round(weather.main.temp)}Â°\n              </div>\n              <div className=\"weather\">\n                {weather.weather[0].description} \n              </div>\n              <div className=\"icon\">\n                <img src={`http://openweathermap.org/img/wn/${weather.weather[0].icon}@2x.png`} alt=\"weather-icon\"/> \n              </div>\n            </div>\n          </div>\n          ) : ('')}\n      </main>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}